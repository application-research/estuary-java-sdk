/*
 * Estuary API
 * This is the API for the Estuary application.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.MainImportDealBody;
import org.openapitools.client.model.UtilContentAddIpfsBody;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContentApi
 */
@Disabled
public class ContentApiTest {

    private final ContentApi api = new ContentApi();

    /**
     * Add Car object
     *
     * This endpoint is used to add a car object to the network. The object can be a file or a directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAddCarPostTest() throws ApiException {
        String body = null;
        String filename = null;
        String commp = null;
        String size = null;
        String response = api.contentAddCarPost(body, filename, commp, size);
        // TODO: test validations
    }

    /**
     * Add IPFS object
     *
     * This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAddIpfsPostTest() throws ApiException {
        UtilContentAddIpfsBody body = null;
        String response = api.contentAddIpfsPost(body);
        // TODO: test validations
    }

    /**
     * Add new content
     *
     * This endpoint is used to upload new content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAddPostTest() throws ApiException {
        File _file = null;
        String collection = null;
        String collectionPath = null;
        String response = api.contentAddPost(_file, collection, collectionPath);
        // TODO: test validations
    }

    /**
     * Get aggregated content stats
     *
     * This endpoint returns aggregated content stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAggregatedContentGetTest() throws ApiException {
        String content = null;
        String response = api.contentAggregatedContentGet(content);
        // TODO: test validations
    }

    /**
     * Get all deals for a user
     *
     * This endpoint is used to get all deals for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAllDealsGetTest() throws ApiException {
        String begin = null;
        String duration = null;
        String all = null;
        String response = api.contentAllDealsGet(begin, duration, all);
        // TODO: test validations
    }

    /**
     * Get content bandwidth
     *
     * This endpoint returns content bandwidth
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentBwUsageContentGetTest() throws ApiException {
        String content = null;
        String response = api.contentBwUsageContentGet(content);
        // TODO: test validations
    }

    /**
     * Add a new content
     *
     * This endpoint adds a new content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentCreatePostTest() throws ApiException {
        String body = null;
        String response = api.contentCreatePost(body);
        // TODO: test validations
    }

    /**
     * Content with deals
     *
     * This endpoint lists all content with deals
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentDealsGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String response = api.contentDealsGet(limit, offset);
        // TODO: test validations
    }

    /**
     * Ensure Replication
     *
     * This endpoint ensures that the content is replicated to the specified number of providers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentEnsureReplicationDatacidGetTest() throws ApiException {
        String datacid = null;
        String response = api.contentEnsureReplicationDatacidGet(datacid);
        // TODO: test validations
    }

    /**
     * List all failures for a content
     *
     * This endpoint returns all failures for a content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentFailuresContentGetTest() throws ApiException {
        String content = null;
        String response = api.contentFailuresContentGet(content);
        // TODO: test validations
    }

    /**
     * Import a deal
     *
     * This endpoint imports a deal into the shuttle.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentImportdealPostTest() throws ApiException {
        MainImportDealBody body = null;
        String response = api.contentImportdealPost(body);
        // TODO: test validations
    }

    /**
     * List all pinned content
     *
     * This endpoint lists all content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentListGetTest() throws ApiException {
        List<String> response = api.contentListGet();
        // TODO: test validations
    }

    /**
     * Read content
     *
     * This endpoint reads content from the blockstore
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentReadContGetTest() throws ApiException {
        String cont = null;
        String response = api.contentReadContGet(cont);
        // TODO: test validations
    }

    /**
     * Get staging zone for user
     *
     * This endpoint is used to get staging zone for user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentStagingZonesGetTest() throws ApiException {
        String response = api.contentStagingZonesGet();
        // TODO: test validations
    }

    /**
     * Get content statistics
     *
     * This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentStatsGetTest() throws ApiException {
        String limit = null;
        String response = api.contentStatsGet(limit);
        // TODO: test validations
    }

    /**
     * Content Status
     *
     * This endpoint returns the status of a content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentStatusIdGetTest() throws ApiException {
        Integer id = null;
        String response = api.contentStatusIdGet(id);
        // TODO: test validations
    }

}
